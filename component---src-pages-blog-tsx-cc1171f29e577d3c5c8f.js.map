{"version":3,"file":"component---src-pages-blog-tsx-cc1171f29e577d3c5c8f.js","mappings":"4NAmDA,MAhDA,SAAyBA,EAA0BC,GACjD,MAAM,EAACC,EAAS,EAACC,IAAeC,EAAAA,EAAAA,eAA+BC,GA4C/D,MAAO,CAAEH,WAAUI,iBA1CnB,SAA0BC,QACbF,IAAPL,GAEJQ,QAAQC,IAAIF,EAAiBG,KAAIC,UAC/B,IAAIC,QAAiBC,MAAMC,GACvB,IAEE,IAAIC,QAAYC,OAAOC,OAAOC,UAC5B,MACA,CACEC,QAAS,CAAC,UAAW,WACrBC,KAAK,EACLC,IAAK,MACLC,EAAGrB,EACHsB,IAAK,WAEP,WACA,EACA,CAAC,UAAW,YAGVC,QAAkBR,OAAOC,OAAOQ,QAClC,CACEC,KAAM,UACN1B,GAAI,IAAI2B,WAAW3B,IAErBe,QACMH,EAASgB,eAGjB,OAAO,IAAIC,aAAcC,OAAON,EAClC,CAAE,MAAOO,GACP,MAEJC,MAAKC,IACP,MAAMC,EAAaD,EAAGE,QAAOC,QAAW/B,IAAN+B,IACT,GAArBF,EAAWG,QACbC,QAAQC,MAAM,aAAaL,EAAWG,iBAAiBJ,EAAGI,WAE5DlC,EAAY+B,EAAW,GAE3B,EAEF,E,SCpBA,MAwCaM,EAAeA,KAAMC,EAAAA,EAAAA,IAAA,aAAO,mBAEzC,MA1CiBC,IAAuC,IAAAC,EAAA,IAAtC,KAAEC,EAAI,SAAEC,GAAyBH,EAE7C1C,EAA0B,QAAxB2C,EADY,IAAIG,gBAAgBD,EAASE,QAC1BC,IAAI,aAAK,IAAAL,OAAA,EAArBA,EAAuBM,MAAM,KAAKvC,IAAIwC,SAE3C,EAACjD,EAAO,EAAEkD,IAAc/C,EAAAA,EAAAA,aACxB,SAAEF,EAAQ,iBAAEI,GAAqB8C,EAAgBpD,EAAIC,GAEzD,OACEwC,EAAAA,EAAAA,IAAAY,EAAAA,SAAA,MACEZ,EAAAA,EAAAA,IAACa,EAAAA,EAAQ,MACPb,EAAAA,EAAAA,IAAA,iBACWpC,IAAPL,IAAqByC,EAAAA,EAAAA,IAAA,SAAG,iGACxBzC,QAAmBK,IAAbH,IAA2BuC,EAAAA,EAAAA,IAAA,QAAMc,MAAO,CAAEC,UAAW,YAC3Df,EAAAA,EAAAA,IAAA,SAAOgB,WAAS,EAACC,KAAM,WACrBH,MAAO,CACLI,MAAO,MACPC,SAAU,QACVC,OAAQ,OAEVC,SAAW/B,GAAMoB,EAAWpB,EAAEgC,OAAOC,OACrCC,UAAYlC,IACV,GAAc,UAAVA,EAAEhB,IAAiB,CACrBgB,EAAEmC,iBACF,IAAIC,EAAWvB,EAAKwB,QAAQC,MAAM3D,KAAK4D,GAASA,EAAKC,KAAKC,YACnC,GAAnBL,EAAS9B,OACX/B,EAAiB6D,GAEjB7B,QAAQC,MAAM,sBAClB,OAINE,EAAAA,EAAAA,IAAAY,EAAAA,SAAA,KAAuB,IAApBnD,aAAQ,EAARA,EAAUmC,SAAe,yBAC5BI,EAAAA,EAAAA,IAAAY,EAAAA,SAAA,KAAGnD,aAAQ,EAARA,EAAUQ,KAAI,CAACc,EAAWiD,KAAMhC,SAAAA,EAAAA,IAAA,OAAK1B,IAAK0D,EAAGC,wBAAyB,CAAEC,QA5CpEC,EA4CoFpD,EA3C5F,QAAQoD,cADjB,IAAiBA,CA4CoG,OAG9G,C","sources":["webpack://chefyeum.github.io/./src/hooks/useFetchDecrypt.ts","webpack://chefyeum.github.io/./src/pages/blog.tsx"],"sourcesContent":["\nimport react, { useState } from 'react';\n\nfunction useFetchDecrypt(iv: number[] | undefined, keyData: string | undefined) {\n  const [blogList, setBlogList] = useState<string[] | undefined>(undefined)\n\n  function retrieveBlogList(encryptedSrcUrls: string[]): void {\n    if (iv === undefined) return;\n    // console.log(encryptedSrcUrls)\n    Promise.all(encryptedSrcUrls.map(async url => {\n      let response = await fetch(url)\n          try {\n            // console.log(response)\n            let key = await crypto.subtle.importKey(\n              \"jwk\",\n              {\n                key_ops: ['encrypt', 'decrypt'],\n                ext: true,\n                kty: 'oct',\n                k: keyData,\n                alg: 'A256GCM'\n              },\n              \"AES-GCM\",\n              true,\n              [\"encrypt\", \"decrypt\"]\n            );\n\n            let decrypted = await crypto.subtle.decrypt(\n              {\n                name: \"AES-GCM\",\n                iv: new Uint8Array(iv)\n              },\n              key,\n              await response.arrayBuffer()\n            );\n\n            return new TextDecoder().decode(decrypted);\n          } catch (e) {\n            // Do nothing - things will fail (by design)\n          }\n    })).then(xs => {\n      const validPosts = xs.filter(x => x !== undefined)\n      if (validPosts.length != 1) {\n        console.error(`Decrypted ${validPosts.length} out of ${xs.length}.`)\n      }\n      setBlogList(validPosts)\n    })\n  }\n  return { blogList, retrieveBlogList };\n}\n\nexport default useFetchDecrypt;\n","import React, { useState } from \"react\"\nimport { HeadFC, graphql } from \"gatsby\"\nimport Template from \"../Template\"\nimport useFetchDecrypt from \"../hooks/useFetchDecrypt\"\n\n\nexport const query = graphql`\n  query AllPosts {\n    allFile(filter: {extension: {eq: \"encrypted\"}}) {\n      edges {\n        node {\n          publicURL\n        }\n      }\n    }\n  }\n`\n\nfunction compile(s: string): string {\n  return `<pre>${s}</pre>`\n}\n\n\n/* TODO: find library type def? */\ninterface BlogPageProps {\n  location: Location,\n  data: { file: { publicURL: string }, allFile: { edges: { node: { publicURL: string } }[] } }\n}\n\nconst BlogPage = ({ data, location }: BlogPageProps) => {\n  let queryParams = new URLSearchParams(location.search)\n  let iv = queryParams.get('iv')?.split(',').map(Number)\n\n  let [keyData, setKeyData] = useState<string | undefined>();\n  let { blogList, retrieveBlogList } = useFetchDecrypt(iv, keyData)\n\n  return (\n    <>\n      <Template>\n        <main>\n          {(iv === undefined) && <p>In order to decrypt the blog, you must provide an initialisation vector. Contact Dee for how.</p>}\n          {(iv && blogList === undefined) && <form style={{ textAlign: 'center' }}>\n            <input autoFocus type={\"password\"}\n              style={{\n                width: '95%',\n                maxWidth: '600px',\n                height: '2em'\n              }}\n              onChange={(e) => setKeyData(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter') {\n                  e.preventDefault();\n                  let blogUrls = data.allFile.edges.map((edge) => edge.node.publicURL)\n                  if (blogUrls.length != 0)\n                    retrieveBlogList(blogUrls)\n                  else\n                    console.error(\"No blog urls found.\")\n                }\n              }}\n            />\n          </form>}\n          <>{blogList?.length == 0 && \"Decryption failed...\"}</>\n          <>{blogList?.map((decrypted, i) => <div key={i} dangerouslySetInnerHTML={{ __html: compile(decrypted) }} />)}</>\n        </main>\n      </Template>\n    </>\n  );\n}\n\nexport const Head: HeadFC = () => <title>ChefYeum - Blog</title>\n\nexport default BlogPage"],"names":["iv","keyData","blogList","setBlogList","useState","undefined","retrieveBlogList","encryptedSrcUrls","Promise","all","map","async","response","fetch","url","key","crypto","subtle","importKey","key_ops","ext","kty","k","alg","decrypted","decrypt","name","Uint8Array","arrayBuffer","TextDecoder","decode","e","then","xs","validPosts","filter","x","length","console","error","Head","___EmotionJSX","_ref","_queryParams$get","data","location","URLSearchParams","search","get","split","Number","setKeyData","useFetchDecrypt","React","Template","style","textAlign","autoFocus","type","width","maxWidth","height","onChange","target","value","onKeyDown","preventDefault","blogUrls","allFile","edges","edge","node","publicURL","i","dangerouslySetInnerHTML","__html","s"],"sourceRoot":""}
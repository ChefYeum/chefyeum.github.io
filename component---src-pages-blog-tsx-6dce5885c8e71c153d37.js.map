{"version":3,"file":"component---src-pages-blog-tsx-6dce5885c8e71c153d37.js","mappings":"4NAiDA,MA9CA,SAAyBA,EAA0BC,GACjD,MAAM,EAACC,EAAS,EAACC,IAAeC,EAAAA,EAAAA,eAA+BC,GAE/D,SAASC,EAASC,GAChB,YAAyBF,IAAjBE,CACV,CAsCA,MAAO,CAAEL,WAAUM,iBApCnB,SAA0BC,QACbJ,IAAPL,GACJU,QAAQC,IAAIF,EAAiBG,KAAIC,GAC/BC,MAAMD,GACHE,MAAKC,UACJ,IACE,IAAIC,QAAYC,OAAOC,OAAOC,UAC5B,MACA,CACEC,QAAS,CAAC,UAAW,WACrBC,KAAK,EACLC,IAAK,MACLC,EAAGvB,EACHwB,IAAK,WAEP,WACA,EACA,CAAC,UAAW,YAGVC,QAAkBR,OAAOC,OAAOQ,QAClC,CACEC,KAAM,UACN5B,GAAI,IAAI6B,WAAW7B,IAErBiB,QACMa,EAASC,eAGjB,OAAO,IAAIC,aAAcC,OAAOP,EAClC,CAAE,MAAOQ,GACPC,QAAQC,MAAMF,EAChB,QAEHnB,MAAKsB,GAAMlC,EAAYkC,EAAGC,OAAOhC,KACtC,EAEF,E,SCbA,MAqCaiC,EAAeA,KAAMC,EAAAA,EAAAA,IAAA,aAAO,mBAEzC,MAvCiBC,IAAuC,IAAAC,EAAA,IAAtC,KAAEC,EAAI,SAAEC,GAAyBH,EAE7CzC,EAA0B,QAAxB0C,EADY,IAAIG,gBAAgBD,EAASE,QAC1BC,IAAI,aAAK,IAAAL,OAAA,EAArBA,EAAuBM,MAAM,KAAKpC,IAAIqC,SAE3C,EAAChD,EAAO,EAAEiD,IAAc9C,EAAAA,EAAAA,aACxB,SAAEF,EAAQ,iBAAEM,GAAqB2C,EAAgBnD,EAAIC,GAEzD,OACEuC,EAAAA,EAAAA,IAAAY,EAAAA,SAAA,MACEZ,EAAAA,EAAAA,IAACa,EAAAA,EAAQ,MACPb,EAAAA,EAAAA,IAAA,iBACWnC,IAAPL,IAAqBwC,EAAAA,EAAAA,IAAA,SAAG,iGACxBxC,QAAmBK,IAAbH,IAA2BsC,EAAAA,EAAAA,IAAA,QAAMc,MAAO,CAAEC,UAAW,YAC3Df,EAAAA,EAAAA,IAAA,SAAOgB,WAAS,EAACC,KAAM,WACrBH,MAAO,CACLI,MAAO,MACPC,SAAU,QACVC,OAAQ,OAEVC,SAAW3B,GAAMgB,EAAWhB,EAAE4B,OAAOC,OACrCC,UAAY9B,IACV,GAAc,UAAVA,EAAEjB,IAAiB,CACrBiB,EAAE+B,iBACF,IAAIC,EAAWvB,EAAKwB,QAAQC,MAAMxD,KAAKyD,GAASA,EAAKC,KAAKC,YAC1D/D,EAAiB0D,EACnB,OAIN1B,EAAAA,EAAAA,IAAAY,EAAAA,SAAA,KAAuB,IAApBlD,aAAQ,EAARA,EAAUsE,SAAe,yBAC5BhC,EAAAA,EAAAA,IAAAY,EAAAA,SAAA,KAAGlD,aAAQ,EAARA,EAAUU,KAAI,CAACc,EAAW+C,KAAMjC,SAAAA,EAAAA,IAAA,OAAKvB,IAAKwD,EAAGC,wBAAyB,CAAEC,QA3CpEC,EA2CoFlD,EA1C5F,YACLkD,kBAFJ,IAAiBA,CA2CoG,OAG9G,C","sources":["webpack://chefyeum.github.io/./src/hooks/useFetchDecrypt.ts","webpack://chefyeum.github.io/./src/pages/blog.tsx"],"sourcesContent":["\nimport react, { useState } from 'react';\n\nfunction useFetchDecrypt(iv: number[] | undefined, keyData: string | undefined) {\n  const [blogList, setBlogList] = useState<string[] | undefined>(undefined)\n\n  function isString(x: string | undefined): x is string {\n    return (x as string) !== undefined;\n  }\n\n  function retrieveBlogList(encryptedSrcUrls: string[]): void {\n    if (iv === undefined) return;\n    Promise.all(encryptedSrcUrls.map(url =>\n      fetch(url)\n        .then(async response => {\n          try {\n            let key = await crypto.subtle.importKey(\n              \"jwk\",\n              {\n                key_ops: ['encrypt', 'decrypt'],\n                ext: true,\n                kty: 'oct',\n                k: keyData,\n                alg: 'A256GCM'\n              },\n              \"AES-GCM\",\n              true,\n              [\"encrypt\", \"decrypt\"]\n            );\n\n            let decrypted = await crypto.subtle.decrypt(\n              {\n                name: \"AES-GCM\",\n                iv: new Uint8Array(iv)\n              },\n              key,\n              await response.arrayBuffer()\n            );\n\n            return new TextDecoder().decode(decrypted);\n          } catch (e) {\n            console.error(e);\n          }\n        })\n    )).then(xs => setBlogList(xs.filter(isString)))\n  }\n  return { blogList, retrieveBlogList };\n}\n\nexport default useFetchDecrypt;\n","import React, { useState } from \"react\"\nimport { HeadFC, graphql } from \"gatsby\"\nimport Template from \"../Template\"\nimport useFetchDecrypt from \"../hooks/useFetchDecrypt\"\n\n\nexport const query = graphql`\n  query AllPosts {\n    allFile(filter: {extension: {eq: \"encrypted\"}}) {\n      edges {\n        node {\n          publicURL\n        }\n      }\n    }\n    file(extension: {eq: \"metadata\"}) {\n      publicURL\n    }\n  }\n`\n\nfunction compile(s: string): string {\n  return `<pre>\n  ${s}\n  </pre>`\n}\n\n\n/* TODO: find library type def? */\ninterface BlogPageProps {\n  location: Location,\n  data: { file: { publicURL: string }, allFile: { edges: { node: { publicURL: string } }[] } }\n}\n\nconst BlogPage = ({ data, location }: BlogPageProps) => {\n  let queryParams = new URLSearchParams(location.search)\n  let iv = queryParams.get('iv')?.split(',').map(Number)\n\n  let [keyData, setKeyData] = useState<string | undefined>();\n  let { blogList, retrieveBlogList } = useFetchDecrypt(iv, keyData)\n\n  return (\n    <>\n      <Template>\n        <main>\n          {(iv === undefined) && <p>In order to decrypt the blog, you must provide an initialisation vector. Contact Dee for how.</p>}\n          {(iv && blogList === undefined) && <form style={{ textAlign: 'center' }}>\n            <input autoFocus type={\"password\"}\n              style={{\n                width: '95%',\n                maxWidth: '600px',\n                height: '2em'\n              }}\n              onChange={(e) => setKeyData(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter') {\n                  e.preventDefault();\n                  let blogUrls = data.allFile.edges.map((edge) => edge.node.publicURL)\n                  retrieveBlogList(blogUrls)\n                }\n              }}\n            />\n          </form>}\n          <>{blogList?.length == 0 && \"Decryption failed...\"}</>\n          <>{blogList?.map((decrypted, i) => <div key={i} dangerouslySetInnerHTML={{ __html: compile(decrypted) }} />)}</>\n        </main>\n      </Template>\n    </>\n  );\n}\n\nexport const Head: HeadFC = () => <title>ChefYeum - Blog</title>\n\nexport default BlogPage"],"names":["iv","keyData","blogList","setBlogList","useState","undefined","isString","x","retrieveBlogList","encryptedSrcUrls","Promise","all","map","url","fetch","then","async","key","crypto","subtle","importKey","key_ops","ext","kty","k","alg","decrypted","decrypt","name","Uint8Array","response","arrayBuffer","TextDecoder","decode","e","console","error","xs","filter","Head","___EmotionJSX","_ref","_queryParams$get","data","location","URLSearchParams","search","get","split","Number","setKeyData","useFetchDecrypt","React","Template","style","textAlign","autoFocus","type","width","maxWidth","height","onChange","target","value","onKeyDown","preventDefault","blogUrls","allFile","edges","edge","node","publicURL","length","i","dangerouslySetInnerHTML","__html","s"],"sourceRoot":""}